package br.furb.jsondb.parser.core;

public interface ParserConstants
{
    int START_SYMBOL = 44;

    int FIRST_NON_TERMINAL    = 44;
    int FIRST_SEMANTIC_ACTION = 84;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1,  0, -1, -1, -1, -1,  0,  0,  0, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1,  3, -1, -1, -1, -1,  4,  5,  6, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10 },
        { -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 13, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 24, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, 26, 26, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 28, 29, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 32, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 38, -1, 38, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 42, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 43, 44, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 48, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 50, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, 56, 57, 57, 57, 57, 57, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1 },
        { -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, 61, -1, -1, -1, -1 },
        { -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 65, 66, 67, 68, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, 71, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1 },
        { -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74 }
    };

    int[][] PRODUCTIONS = 
    {
        {  45,   6, 183 },
        {  46 },
        {  62 },
        {  67 },
        {  79 },
        {  80 },
        {  82 },
        {  18,  47 },
        {  19,   2, 135 },
        {  20,   2,  97,   7,  48,   8 },
        {  43, 150,  81 },
        {  51,  49 },
        {   9,  50 },
        {   0 },
        {  51,  49 },
        {  58 },
        {   2, 101,  52, 137,  54 },
        {  21,  85,   7,   3,  93,  53,   8 },
        {  22,  86,   7,   3,  93,   8 },
        {  23,  87 },
        {  24,  88,   7,   3,  93,   8 },
        {   9,   3,  92 },
        {   0 },
        {  55,  56, 139 },
        {   0 },
        {  25,   2,  99 },
        {   0 },
        {  26, 104 },
        {  27,  26, 105 },
        {  28,  29, 106 },
        {  30, 107,   2,  97,   7,   2,  96,   8 },
        {   9,  58 },
        {   0 },
        {  25,   2,  99,  59, 139,  57 },
        {  28,  29, 106,   7,  60, 100,   8 },
        {  31,  29, 108,   7,  60, 100,   8,  30,   2,  97,   7,  60, 100,   8 },
        {   2,  96,  61 },
        {   9,  60 },
        {   0 },
        {  32,  33,   2,  97,  63,  34,   7, 122,  64, 123,   8 },
        {   7,  94,  60,  95,   8 },
        {   0 },
        {  65,  66 },
        {   3, 116 },
        {   4, 117 },
        {   5, 118 },
        {  26, 104 },
        {   9,  64 },
        {   0 },
        {  35,  68, 102,  36,  60, 103,  73 },
        {  69 },
        {  10 },
        {  71,  70 },
        {   9,  69 },
        {   0 },
        {   2,  96,  72 },
        {  11,   2,  98 },
        {   0 },
        {  37,  74 },
        {   0 },
        {  76,  75 },
        {  78, 115,  74 },
        {   0 },
        {  71,  77, 114,  65 },
        {  12 },
        {  13 },
        {  14 },
        {  15 },
        {  16 },
        {  17 },
        {  38 },
        {  39 },
        {  40,  83 },
        {  20,   2, 145 },
        {  43, 151,  81 },
        {  41,   2, 147 },
        {  42,  19,   2, 149 },
        {   2,  97,   7,   2,  96,   8 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado fim de programa",
        "esperado identificador",
        "esperado numero",
        "esperado literal",
        "esperado data",
        "esperado ;",
        "esperado (",
        "esperado )",
        "esperado ,",
        "esperado *",
        "esperado .",
        "esperado =",
        "esperado >",
        "esperado <",
        "esperado >=",
        "esperado <=",
        "esperado <>",
        "esperado CREATE",
        "esperado DATABASE",
        "esperado TABLE",
        "esperado NUMBER",
        "esperado VARCHAR",
        "esperado DATE",
        "esperado CHAR",
        "esperado CONSTRAINT",
        "esperado NULL",
        "esperado NOT",
        "esperado PRIMARY",
        "esperado KEY",
        "esperado REFERENCES",
        "esperado FOREIGN",
        "esperado INSERT",
        "esperado INTO",
        "esperado VALUES",
        "esperado SELECT",
        "esperado FROM",
        "esperado WHERE",
        "esperado AND",
        "esperado OR",
        "esperado DROP",
        "esperado DESCRIBE",
        "esperado SET",
        "esperado INDEX",
        
        // <--- NÃO-TERMINAIS ---
        // "<sentenca> inválido",
        "esperado [ CREATE | INSERT INTO | SELECT | DROP | DESCRIBE | SET ]",
        // "<acao> inválido",
        "esperado [ CREATE | INSERT INTO | SELECT | DROP | DESCRIBE | SET ]",
        // "<criar> inválido",
        "esperado [ CREATE ]",
        // "<criar_estrutura> inválido",
        "esperado [ DATABASE | TABLE | INDEX ]",
        // "<lista_atributos> inválido",
        "esperado [ identificador ]",
        // "<lista_atributos_rec> inválido",
        "esperado [ ) | , ]",
        // "<lista_atributos_rec_dec> inválido",
        "esperado [ identificador | CONSTRAINT ]",
        // "<atributo> inválido",
        "esperado [ identificador ]",
        // "<tipo> inválido",
        "esperado [ NUMBER | VARCHAR | DATE | CHAR ]",
        // "<decimal> inválido",
        "esperado [ ) | , ]",
        // "<restricao> inválido",
        "esperado [ ) | , | CONSTRAINT | NULL | NOT NULL | PRIMARY KEY | REFERENCES ]",
        // "<nome_restricao_opt> inválido",
        "esperado [ CONSTRAINT | NULL | NOT NULL | PRIMARY KEY | REFERENCES ]",
        // "<restricao_constraint> inválido",
        "esperado [ NULL | NOT NULL | PRIMARY KEY | REFERENCES ]",
        // "<lista_restricoes_finais_rec> inválido",
        "esperado [ ) | , ]",
        // "<lista_restricoes_finais> inválido",
        "esperado [ CONSTRAINT ]",
        // "<tipo_restricao_final> inválido",
        "esperado [ PRIMARY KEY | FOREIGN KEY ]",
        // "<lista_ids> inválido",
        "esperado [ identificador ]",
        // "<lista_ids_rec> inválido",
        "esperado [ ; | ) | , | ou WHERE ]",
        // "<incluir> inválido",
        "esperado [ INSERT INTO ]",
        // "<colunas> inválido",
        "esperado [ ( | VALUES ]",
        // "<lista_valores> inválido",
        "esperado [ numero | literal | data | NULL ]",
        // "<valor> inválido",
        "esperado [ numero | literal | data | NULL ]",
        // "<lista_valores_rec> inválido",
        "esperado [ ) | , ]",
        // "<selecionar> inválido",
        "esperado [ SELECT ]",
        // "<campos> inválido",
        "esperado [ identificador | * ]",
        // "<lista_campos> inválido",
        "esperado [ id ]",
        // "<lista_campos_rec> inválido",
        "esperado [ , | ou FROM ]",
        // "<campo> inválido",
        "esperado [ identificador ]",
        // "<tabela_opt> inválido",
        "esperado [ , | . | = | > | < | >= | <= | <> | FROM ]",
        // "<clausula_where> inválido",
        "esperado [ ; | WHERE ]",
        // "<lista_condicoes> inválido",
        "esperado [ identificador ]",
        // "<lista_condicoes_rec> inválido",
        "esperado [ ; | AND | OR ]",
        // "<condicao> inválido",
        "esperado [ identificador ]",
        // "<op_relacional> inválido",
        "esperado [ = | > | < | >= | <= | <> ]",
        // "<op_logico> inválido",
        "esperado [ AND | OR ]",
        // "<eliminar> inválido",
        "esperado [ DROP ]",
        // "<descrever> inválido",
        "esperado [ DESCRIBE ]",
        // "<index> inválido",
        "esperado [ identificador ]",
        // "<setar_banco> inválido",
        "esperado [ SET ]",
        // "<eliminar_estrutura> inválido"
        "esperado [ TABLE | INDEX ]"
        // --- NÃO-TERMINAIS --->
    };
}
