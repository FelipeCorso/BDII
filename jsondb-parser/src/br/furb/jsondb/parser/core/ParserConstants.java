package br.furb.jsondb.parser.core;

public interface ParserConstants
{
    int START_SYMBOL = 45;

    int FIRST_NON_TERMINAL    = 45;
    int FIRST_SEMANTIC_ACTION = 86;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1,  0, -1, -1, -1, -1, -1,  0,  0,  0, -1 },
        {  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1,  3, -1, -1, -1, -1, -1,  3,  3,  3, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1, -1,  6, -1, -1, -1, -1, -1,  7,  8,  9, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13 },
        { -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 16, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 21, 22, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 25, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 27, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 26, 26, 26, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, 29, 29, 29, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 31, 32, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 35, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 41, -1, 41, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 45, 45, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 46, 47, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 51, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 53, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, 59, 60, 60, 60, 60, 60, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 64, -1, -1, -1, -1, -1 },
        { -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, 68, 69, 70, 71, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, 74, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77 }
    };

    int[][] PRODUCTIONS = 
    {
        {  47,  46, 185 },
        {  45 },
        {   0 },
        {  48,   6, 184 },
        {  49 },
        {  65 },
        {  70 },
        {  82 },
        {  83 },
        {  84 },
        {  18,  50 },
        {  19,   2, 137 },
        {  20,   2, 138,   7,  51,   8 },
        {  44,   2,  98,  40,   2,  99,   7,   2,  98,   8, 143 },
        {  54,  52 },
        {   9,  53 },
        {   0 },
        {  54,  52 },
        {  61 },
        {   2, 103,  55, 139,  57 },
        {  21,  87,   7,   3,  95,  56,   8 },
        {  22,  88,   7,   3,  95,   8 },
        {  23,  89 },
        {  24,  90,   7,   3,  95,   8 },
        {   9,   3,  94 },
        {   0 },
        {  58,  59, 141 },
        {   0 },
        {  25,   2, 101 },
        {   0 },
        {  26, 106 },
        {  27,  26, 107 },
        {  28,  29, 108 },
        {  30, 109,   2,  99,   7,  96,   2,  98, 115,   8 },
        {   9,  61 },
        {   0 },
        {  25,   2, 102,  62, 141,  60 },
        {  28,  29, 108,   7,  96,  63, 112,   8 },
        {  31,  29, 110,   7,  96,  63, 114,   8,  30,   2,  99,   7,  96,  63, 115,   8 },
        {   2,  98,  64 },
        {   9,  63 },
        {   0 },
        {  32,  33,   2,  99,  66,  34,   7, 124,  67, 125,   8 },
        {   7,  96,  63,  97,   8 },
        {   0 },
        {  68,  69 },
        {   3, 118 },
        {   4, 119 },
        {   5, 120 },
        {  26, 106 },
        {   9,  67 },
        {   0 },
        {  35,  71, 104,  36,  96,  63, 105,  76 },
        {  72 },
        {  10 },
        {  74,  73 },
        {   9,  72 },
        {   0 },
        {   2,  98,  75 },
        {  11,   2, 100 },
        {   0 },
        {  37,  77, 142 },
        {   0 },
        {  79, 123,  78 },
        {  81, 117,  77 },
        {   0 },
        {  74,  80, 116,  68 },
        {  12 },
        {  13 },
        {  14 },
        {  15 },
        {  16 },
        {  17 },
        {  38 },
        {  39 },
        {  41,  85 },
        {  20,   2, 147 },
        {  44,   2, 153,  40,   2,  99 },
        {  42,   2, 149 },
        {  43,  19,   2, 151 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado fim de programa",
        "esperado identificador",
        "esperado numero",
        "esperado literal",
        "esperado data",
        "esperado ;",
        "esperado (",
        "esperado )",
        "esperado ,",
        "esperado *",
        "esperado .",
        "esperado =",
        "esperado >",
        "esperado <",
        "esperado >=",
        "esperado <=",
        "esperado <>",
        "esperado CREATE",
        "esperado DATABASE",
        "esperado TABLE",
        "esperado NUMBER",
        "esperado VARCHAR",
        "esperado DATE",
        "esperado CHAR",
        "esperado CONSTRAINT",
        "esperado NULL",
        "esperado NOT",
        "esperado PRIMARY",
        "esperado KEY",
        "esperado REFERENCES",
        "esperado FOREIGN",
        "esperado INSERT",
        "esperado INTO",
        "esperado VALUES",
        "esperado SELECT",
        "esperado FROM",
        "esperado WHERE",
        "esperado AND",
        "esperado OR",
        "esperado ON",
        "esperado DROP",
        "esperado DESCRIBE",
        "esperado SET",
        "esperado INDEX",
        
		// <--- NÃO-TERMINAIS ---
		// "<documento> inválido",
		"esperado [ CREATE | INSERT INTO | SELECT | DROP | DESCRIBE | SET ]",
		// "<documento_rec> inválido",
		"esperado [ fim de arquivo | CREATE | INSERT INTO | SELECT | DROP | DESCRIBE | SET ]",
		// "<sentenca> inválido",
		"esperado [ CREATE | INSERT INTO | SELECT | DROP | DESCRIBE | SET ]",
		// "<acao> inválido",
		"esperado [ CREATE | INSERT INTO | SELECT | DROP | DESCRIBE | SET ]",
		// "<criar> inválido",
		"esperado [ CREATE ]",
		// "<criar_estrutura> inválido",
		"esperado [ DATABASE | TABLE | INDEX ]",
		// "<lista_atributos> inválido",
		"esperado [ identificador ]",
		// "<lista_atributos_rec> inválido",
		"esperado [ ) | , ]",
		// "<lista_atributos_rec_dec> inválido",
		"esperado [ identificador | CONSTRAINT ]",
		// "<atributo> inválido",
		"esperado [ identificador ]",
		// "<tipo> inválido",
		"esperado [ NUMBER | VARCHAR | DATE | CHAR ]",
		// "<decimal> inválido",
		"esperado [ ) | , ]",
		// "<restricao> inválido",
		"esperado [ ) | , | CONSTRAINT | NULL | NOT | PRIMARY KEY | REFERENCES ]",
		// "<nome_restricao_opt> inválido",
		"esperado [ CONSTRAINT | NULL | NOT | PRIMARY KEY | REFERENCES ]",
		// "<restricao_constraint> inválido",
		"esperado [ NULL | NOT | PRIMARY KEY | REFERENCES ]",
		// "<lista_restricoes_finais_rec> inválido",
		"esperado [ ) | , ]",
		// "<lista_restricoes_finais> inválido",
		"esperado [ CONSTRAINT ]",
		// "<tipo_restricao_final> inválido",
		"esperado [ PRIMARY KEY | FOREIGN KEY ]",
		// "<lista_ids> inválido",
		"esperado [ identificador ]",
		// "<lista_ids_rec> inválido",
		"esperado [ ; | ) | , | WHERE ]",
		// "<incluir> inválido",
		"esperado [ INSERT INTO ]",
		// "<colunas> inválido",
		"esperado [ ( | VALUES ]",
		// "<lista_valores> inválido",
		"esperado [ numero | literal | data | NULL ]",
		// "<valor> inválido",
		"esperado [ numero | literal | data | NULL ]",
		// "<lista_valores_rec> inválido",
		"esperado [ ) | , ]",
		// "<selecionar> inválido",
		"esperado [ SELECT ]",
		// "<campos> inválido",
		"esperado [ identificador | * ]",
		// "<lista_campos> inválido",
		"esperado [ identificador ]",
		// "<lista_campos_rec> inválido",
		"esperado [ , | FROM ]",
		// "<campo> inválido",
		"esperado [ identificador ]",
		// "<tabela_opt> inválido",
		"esperado [ , | . | = | > | < | >= | <= | <> | FROM ]",
		// "<clausula_where> inválido",
		"esperado [ ; | WHERE ]",
		// "<lista_condicoes> inválido",
		"esperado [ identificador ]",
		// "<lista_condicoes_rec> inválido",
		"esperado [ ; | AND | OR ]",
		// "<condicao> inválido",
		"esperado [ identificador ]",
		// "<op_relacional> inválido",
		"esperado [ = | > | < | >= | <= | <> ]",
		// "<op_logico> inválido",
		"esperado [ AND | OR ]",
		// "<eliminar> inválido",
		"esperado [ DROP ]",
		// "<descrever> inválido",
		"esperado [ DESCRIBE ]",
		// "<setar_banco> inválido",
		"esperado [ SET ]",
		// "<eliminar_estrutura> inválido"
		"esperado [ TABLE | INDEX ]"
// --- NÃO-TERMINAIS --->
    };
}
